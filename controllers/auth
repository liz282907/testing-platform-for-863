var validator = require('validator')
var EventProxy = require('eventproxy')


var util = require('../util/index').util
var tools = require('../util/index').tools
var authMiddleware = require('../middleWares/auth')

var User = require('../modelHelper/index').User
var ep = new EventProxy()

/**
 * *********************util functions**********************
 */

/**
 * *********************util functions**********************
 */

exports.signup = function (req,res,next) {
    /**
     * ep的监听事件
     */

    ep.on('validate_err',function (msg) {
        res.status(422).send({
            error: msg
        })
        // res.redirect('back')
        return
    })
    ep.fail(next)// error时，unbind所有handler,并执行next

    var username = req.body.username,
        email = req.body.email,
        pass = req.body.password,
        confirmPass = req.body.confirmPass;
        
    //初步验证数据
    var result = util.validate(req);
    if (!result.valid) {
        ep.emit('validate_err', result.msg)
        return
    }
    //查看数据库

    const orCondition = [
        {username:username},
        {email: email}
    ]
    User.getUsersByOrQuery(orCondition,{},function (err,users) {
        if(err){
            return next(err)
        }
        if(users.length>0){
            ep.emit("validate_err","用户名/邮箱已被注册，请更换");
            return
        }
        tools.hash(pass,function (err,passHash) {
            if(err) return next(err);
            const user = {
                username,
                email,
                pass: passHash
            }
            User.createAndSave(user,(err)=>{
                if(err) return next(err);
            })
            res.status(201).send({
                msg: "创建成功"
            })
            exports.signin(req,res,next);
        })


    })





}

exports.showSignup = function (req,res,next) {
    res.end(" sign up ")
}

exports.showSignin = function (req,res,next) {
    res.end(" sign up ")
}

exports.signin = function (req,res,next) {

    let loginname = validator.trim(req.body.username),
        password = validator.trim(req.body.password);

    ep.on('login_err',function (msg) {
        res.status(401).send({
            error: msg
        })
        return
    })

    if(!loginname || !password){
        res.status(422).send({
            error: '信息不完整'
        })
        return
    }

    let getUser;
    if(loginname.indexOf('@')!==-1){
        getUser = User.getUserByMail
    }else
        getUser = User.getUserByName

    getUser(loginname,(err,user)=>{
        if(err) return next(err)
        if(!user) return ep.emit('login_err','用户名不存在')
        tools.compareHash(password,user.pass,(err,equal)=>{
            if(err) return next(err);
            if(!equal){
                ep.emit('login_err','密码错误')
                return
            }
            authMiddleware.genSessionID(res);
            res.status(200).json({msg:'登录成功'});
            console.log(res)

        })

    })
}
exports.signout = function (req,res,next) {

    res.clearCookie(config.cookie_name,{path:'/'})
    res.status(200).json({
        msg: "您已登出"
    })
}

exports.updatePassword = function (req,res,next) {
    res.end(" sign up ")
}

exports.showRetrievePass = function (req,res,next) {
    res.end(" sign up ")
}

exports.resetPassword = function (req,res,next) {
    res.end(" sign up ")
}
exports.retrievePass = function (req,res,next) {
    res.end(" sign up ")
}
